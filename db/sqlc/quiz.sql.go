// Code generated by sqlc. DO NOT EDIT.
// source: quiz.sql

package db

import (
	"context"
)

const createQuiz = `-- name: CreateQuiz :one
INSERT INTO "quiz" (
    "name",
    "description",
    "created_by",
    "created_at",
    "updated_at"
    ) VALUES (
        $1,
        $2,
        $3,
        now(),
        now()
    ) RETURNING id, name, description, created_by, created_at, updated_at, deleted_at
`

type CreateQuizParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	CreatedBy   int32  `json:"created_by"`
}

func (q *Queries) CreateQuiz(ctx context.Context, arg CreateQuizParams) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, createQuiz, arg.Name, arg.Description, arg.CreatedBy)
	var i Quiz
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.CreatedBy,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteQuiz = `-- name: DeleteQuiz :exec
UPDATE "quiz" SET
    "deleted_at" = now()
WHERE "id" = $1
`

func (q *Queries) DeleteQuiz(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteQuiz, id)
	return err
}

const getAllQuizzes = `-- name: GetAllQuizzes :many
SELECT id, name, description, created_by, created_at, updated_at, deleted_at FROM "quiz" 
WHERE "deleted_at" 
is null
ORDER BY "id" 
ASC LIMIT $1 OFFSET $2
`

type GetAllQuizzesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetAllQuizzes(ctx context.Context, arg GetAllQuizzesParams) ([]Quiz, error) {
	rows, err := q.db.QueryContext(ctx, getAllQuizzes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Quiz{}
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.CreatedBy,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuiz = `-- name: UpdateQuiz :exec
UPDATE "quiz" SET
    "name" = $1,
    "description" = $2,
    "updated_at" = now()
WHERE "id" = $3
`

type UpdateQuizParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	ID          int32  `json:"id"`
}

func (q *Queries) UpdateQuiz(ctx context.Context, arg UpdateQuizParams) error {
	_, err := q.db.ExecContext(ctx, updateQuiz, arg.Name, arg.Description, arg.ID)
	return err
}
