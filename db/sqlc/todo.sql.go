// Code generated by sqlc. DO NOT EDIT.
// source: todo.sql

package db

import (
	"context"
	"database/sql"
)

const createTodo = `-- name: CreateTodo :one
INSERT INTO "todo" (
    "title",
    "description",
    "is_completed",
    "user_id"
    ) VALUES (
        $1,
        $2,
        $3,
        $4
    ) RETURNING id, title, description, is_completed, user_id, created_at, updated_at, deleted_at
`

type CreateTodoParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	IsCompleted bool           `json:"is_completed"`
	UserID      int32          `json:"user_id"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.db.QueryRowContext(ctx, createTodo,
		arg.Title,
		arg.Description,
		arg.IsCompleted,
		arg.UserID,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsCompleted,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
UPDATE "todo" SET
    "deleted_at" = now()
WHERE "id" = $1
`

func (q *Queries) DeleteTodo(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteTodo, id)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, title, description, is_completed, user_id, created_at, updated_at, deleted_at FROM "todo" 
WHERE "deleted_at" is null and
"id" = $1
`

func (q *Queries) GetTodo(ctx context.Context, id int32) (Todo, error) {
	row := q.db.QueryRowContext(ctx, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.IsCompleted,
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getTodos = `-- name: GetTodos :many
SELECT id, title, description, is_completed, user_id, created_at, updated_at, deleted_at FROM "todo" 
WHERE "deleted_at" is null and
"user_id" = $1
ORDER BY "id" ASC
LIMIT $2 OFFSET $3
`

type GetTodosParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetTodos(ctx context.Context, arg GetTodosParams) ([]Todo, error) {
	rows, err := q.db.QueryContext(ctx, getTodos, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.IsCompleted,
			&i.UserID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodosCount = `-- name: GetTodosCount :one
SELECT count(*) FROM "todo" 
WHERE "deleted_at" is null and
"user_id" = $1
`

func (q *Queries) GetTodosCount(ctx context.Context, userID int32) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTodosCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const updateTodo = `-- name: UpdateTodo :exec
UPDATE "todo" SET
    "title" = $1,
    "description" = $2,
    "is_completed" = $3,
    "updated_at" = now()
WHERE "id" = $4
`

type UpdateTodoParams struct {
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	IsCompleted bool           `json:"is_completed"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) error {
	_, err := q.db.ExecContext(ctx, updateTodo,
		arg.Title,
		arg.Description,
		arg.IsCompleted,
		arg.ID,
	)
	return err
}
